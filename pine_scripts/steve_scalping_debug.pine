//@version=5
indicator("🔍 DEBUG Scalper - Diagnosis Mode", overlay=true)

// =====================
// === DEBUG PARAMETERS - RELAXED FOR TESTING
// =====================

// 1. Trend Filter - More Relaxed
trend_period = input.int(15, "EMA Trend Period", minval=5, maxval=50, group="Trend Filter")
trend_period_slow = input.int(30, "EMA Slow Period", minval=15, maxval=100, group="Trend Filter")
trend_htf = input.timeframe("30", "Higher Timeframe", options=["15", "30", "1H", "4H"], group="Trend Filter")

// 2. RSI Oscillator - VERY RELAXED
rsi_period = input.int(14, "RSI Period", minval=10, maxval=21, group="Momentum")
rsi_oversold = input.int(40, "RSI Oversold Level", minval=25, maxval=50, group="Momentum")  // More relaxed
rsi_overbought = input.int(60, "RSI Overbought Level", minval=50, maxval=75, group="Momentum")  // More relaxed

// 3. Support & Resistance Detection
pivot_left = input.int(5, "Pivot Left Bars", minval=3, maxval=10, group="Support & Resistance")
pivot_right = input.int(5, "Pivot Right Bars", minval=3, maxval=10, group="Support & Resistance")
sr_tolerance_pct = input.float(0.008, "S&R Zone Tolerance (%)", minval=0.002, maxval=0.02, step=0.001, group="Support & Resistance")  // Much wider

// 4. Risk Management
atr_period = input.int(14, "ATR Period", minval=10, maxval=21, group="Risk Management")
atr_sl_multiplier = input.float(1.2, "ATR SL Multiplier", minval=0.8, maxval=2.0, step=0.1, group="Risk Management")
rr_target = input.float(2.0, "Risk Reward Target", minval=1.5, maxval=3.0, step=0.1, group="Risk Management")

// 5. Confidence Weights - Balanced
w_trend = input.float(2.0, "Weight - Trend Alignment", minval=1, maxval=4, step=0.1, group="Confidence Weights")
w_mtf = input.float(1.5, "Weight - MTF Alignment", minval=1, maxval=4, step=0.1, group="Confidence Weights")
w_sr = input.float(1.5, "Weight - S&R Zone", minval=1, maxval=4, step=0.1, group="Confidence Weights")
w_candle = input.float(1.5, "Weight - Price Action", minval=1, maxval=4, step=0.1, group="Confidence Weights")
w_rsi = input.float(1.0, "Weight - RSI Signal", minval=1, maxval=4, step=0.1, group="Confidence Weights")
w_volume = input.float(1.0, "Weight - Volume Confirmation", minval=1, maxval=4, step=0.1, group="Confidence Weights")
w_volatility = input.float(1.0, "Weight - Volatility Filter", minval=1, maxval=4, step=0.1, group="Confidence Weights")

// 6. VERY RELAXED Execution Settings
min_confidence = input.float(0.35, "Minimum Confidence Level", minval=0.2, maxval=0.8, step=0.01, group="Execution")  // MUCH LOWER ⭐
high_confidence_threshold = input.float(0.60, "High Confidence Threshold", minval=0.4, maxval=0.9, step=0.01, group="Execution")
alert_cooldown_bars = input.int(3, "Alert Cooldown Bars", minval=1, maxval=15, group="Execution")  // MUCH SHORTER ⭐
dynamic_cooldown = input.bool(false, "Dynamic Cooldown", group="Execution")  // Disabled for testing
allow_long = input.bool(true, "Allow Long Signals", group="Execution")
allow_short = input.bool(true, "Allow Short Signals", group="Execution")

// 7. Market Session Filter - DISABLED FOR TESTING
enable_session_filter = input.bool(false, "Enable Market Session Filter", group="Market Session")  // DISABLED ⭐

// 8. VERY RELAXED Volume & Volatility Filters
volume_ma_period = input.int(15, "Volume MA Period", minval=10, maxval=30, group="Volume Filter")
volume_threshold = input.float(0.8, "Volume Threshold (x Average)", minval=0.5, maxval=3.0, step=0.1, group="Volume Filter")  // MUCH LOWER ⭐
atr_ma_period = input.int(14, "ATR MA Period", minval=10, maxval=30, group="Volatility Filter")
volatility_threshold = input.float(0.6, "Volatility Threshold (x Average)", minval=0.3, maxval=2.0, step=0.1, group="Volatility Filter")  // MUCH LOWER ⭐

// 9. Daily Signal Limits - DISABLED FOR TESTING
max_daily_signals = input.int(50, "Max Daily Signals", minval=20, maxval=100, group="Risk Control")  // MUCH HIGHER ⭐
enable_signal_limit = input.bool(false, "Enable Daily Signal Limit", group="Risk Control")  // DISABLED ⭐

// 10. VERY RELAXED Trend Strength
min_trend_strength = input.float(0.005, "Min Trend Strength (%)", minval=0.001, maxval=0.05, step=0.001, group="Trend Strength")  // MUCH LOWER ⭐
ema_separation_min = input.float(0.002, "Min EMA Separation (%)", minval=0.001, maxval=0.03, step=0.001, group="Trend Strength")  // MUCH LOWER ⭐

// 11. Anti-Ranging Filter - DISABLED FOR TESTING
ranging_detection_period = input.int(15, "Ranging Detection Period", minval=8, maxval=30, group="Anti-Ranging")
max_ranging_ratio = input.float(0.95, "Max Ranging Ratio", minval=0.5, maxval=1.0, step=0.05, group="Anti-Ranging")  // VERY TOLERANT ⭐

// 12. Display Settings
show_debug_table = input.bool(true, "Show Debug Table", group="Display")
show_signals = input.bool(true, "Show Entry Signals", group="Display")
show_ema = input.bool(true, "Show EMA Lines", group="Display")

// =====================
// === CORE INDICATORS
// =====================

ema_fast = ta.ema(close, trend_period)
ema_slow = ta.ema(close, trend_period_slow)
[close_htf, ema_htf] = request.security(syminfo.tickerid, trend_htf, [close, ta.ema(close, trend_period)])

rsi = ta.rsi(close, rsi_period)
atr = ta.atr(atr_period)

// Enhanced Volume & Volatility
volume_ma = ta.sma(volume, volume_ma_period)
volume_ratio = volume / volume_ma
atr_ma = ta.sma(atr, atr_ma_period)
volatility_ratio = atr / atr_ma

// =====================
// === TREND ANALYSIS
// =====================

is_uptrend = ema_fast > ema_slow and close > ema_fast
is_downtrend = ema_fast < ema_slow and close < ema_fast
htf_uptrend = close_htf > ema_htf
htf_downtrend = close_htf < ema_htf

// Trend Strength
trend_strength = math.abs(ema_fast - ema_slow) / ema_slow
ema_separation = math.abs(ema_fast - ema_slow) / close
strong_trend = trend_strength >= min_trend_strength and ema_separation >= ema_separation_min

// Multi-timeframe trend confirmation (VERY FLEXIBLE)
trend_alignment_bull = is_uptrend  // Only local trend required
trend_alignment_bear = is_downtrend  // Only local trend required

// =====================
// === SUPPORT & RESISTANCE (Simplified)
// =====================

pivot_high = ta.pivothigh(high, pivot_left, pivot_right)
pivot_low = ta.pivotlow(low, pivot_left, pivot_right)

var float[] resistance_levels = array.new_float()
var float[] support_levels = array.new_float()

if not na(pivot_high)
    if array.size(resistance_levels) >= 3
        array.shift(resistance_levels)
    array.push(resistance_levels, pivot_high)

if not na(pivot_low)
    if array.size(support_levels) >= 3
        array.shift(support_levels)
    array.push(support_levels, pivot_low)

get_nearest_resistance() =>
    float nearest = na
    if array.size(resistance_levels) > 0
        for i = 0 to array.size(resistance_levels) - 1
            level = array.get(resistance_levels, i)
            if level > close and (na(nearest) or level < nearest)
                nearest := level
    nearest

get_nearest_support() =>
    float nearest = na
    if array.size(support_levels) > 0
        for i = 0 to array.size(support_levels) - 1
            level = array.get(support_levels, i)
            if level < close and (na(nearest) or level > nearest)
                nearest := level
    nearest

nearest_resistance = get_nearest_resistance()
nearest_support = get_nearest_support()

// VERY WIDE S&R Zone
is_at_support = not na(nearest_support) and math.abs(close - nearest_support) / close <= sr_tolerance_pct
is_at_resistance = not na(nearest_resistance) and math.abs(close - nearest_resistance) / close <= sr_tolerance_pct

// =====================
// === SIMPLIFIED CANDLESTICK PATTERNS
// =====================

bullish_candle = close > open
bearish_candle = open > close

// =====================
// === ANTI-RANGING FILTER (VERY TOLERANT)
// =====================

highest_high = ta.highest(high, ranging_detection_period)
lowest_low = ta.lowest(low, ranging_detection_period)
range_size = highest_high - lowest_low
current_price_position = (close - lowest_low) / range_size

// Very tolerant ranging detection
is_ranging = range_size / close < max_ranging_ratio and current_price_position > 0.1 and current_price_position < 0.9

// =====================
// === CONFIDENCE CALCULATION (SIMPLIFIED)
// =====================

// Individual component scores (0-1)
trend_score = trend_alignment_bull or trend_alignment_bear ? 1.0 : 0.0
mtf_score = (htf_uptrend and is_uptrend) or (htf_downtrend and is_downtrend) ? 1.0 : 0.3  // More lenient
sr_score = is_at_support or is_at_resistance ? 1.0 : 0.3  // Give partial score even without S&R
candle_score = bullish_candle or bearish_candle ? 1.0 : 0.0
rsi_score_long = rsi <= rsi_oversold ? 1.0 : (rsi <= 50 ? 0.7 : 0.3)  // More lenient
rsi_score_short = rsi >= rsi_overbought ? 1.0 : (rsi >= 50 ? 0.7 : 0.3)  // More lenient
volume_score = volume_ratio >= volume_threshold ? 1.0 : 0.5  // Always give partial score
volatility_score = volatility_ratio >= volatility_threshold ? 1.0 : 0.5  // Always give partial score

// Calculate weighted confidence
total_weight = w_trend + w_mtf + w_sr + w_candle + w_rsi + w_volume + w_volatility

confidence_long = (trend_score * w_trend + mtf_score * w_mtf + sr_score * w_sr + 
                  candle_score * w_candle + rsi_score_long * w_rsi + 
                  volume_score * w_volume + volatility_score * w_volatility) / total_weight

confidence_short = (trend_score * w_trend + mtf_score * w_mtf + sr_score * w_sr + 
                   candle_score * w_candle + rsi_score_short * w_rsi + 
                   volume_score * w_volume + volatility_score * w_volatility) / total_weight

// =====================
// === ENTRY CONDITIONS (VERY RELAXED)
// =====================

// Session Filter (DISABLED)
session_ok = true

// Volume Filter (VERY LENIENT)
volume_ok = volume_ratio >= volume_threshold or volume_ratio >= 0.5

// Volatility Filter (VERY LENIENT)
volatility_ok = volatility_ratio >= volatility_threshold or volatility_ratio >= 0.3

// RSI Filter (VERY WIDE RANGE)
rsi_long_ok = rsi <= rsi_oversold or rsi <= 55
rsi_short_ok = rsi >= rsi_overbought or rsi >= 45

// Anti-ranging filter (VERY TOLERANT)
not_ranging = not is_ranging or true  // Essentially disabled

// Cooldown tracking (SIMPLIFIED)
var int last_long_bar = na
var int last_short_bar = na

// Cooldown checks (VERY SHORT)
long_cooldown_ok = na(last_long_bar) or (bar_index - last_long_bar) >= alert_cooldown_bars
short_cooldown_ok = na(last_short_bar) or (bar_index - last_short_bar) >= alert_cooldown_bars

// VERY RELAXED Entry Conditions
long_entry_ready = allow_long and 
                  trend_alignment_bull and
                  session_ok and 
                  volume_ok and 
                  volatility_ok and 
                  rsi_long_ok and
                  not_ranging and
                  long_cooldown_ok and
                  confidence_long >= min_confidence

short_entry_ready = allow_short and 
                   trend_alignment_bear and
                   session_ok and 
                   volume_ok and 
                   volatility_ok and 
                   rsi_short_ok and
                   not_ranging and
                   short_cooldown_ok and
                   confidence_short >= min_confidence

// Final signal generation
long_signal_final = long_entry_ready
short_signal_final = short_entry_ready

// Update tracking variables
if long_signal_final
    last_long_bar := bar_index

if short_signal_final
    last_short_bar := bar_index

// =====================
// === ALERTS
// =====================

alertcondition(long_signal_final, title="🟢 DEBUG BUY", 
              message='{"action": "BUY", "symbol": "{{ticker}}", "price": {{close}}, "token": "sniper-bybit-production-2024"}')

alertcondition(short_signal_final, title="🔴 DEBUG SELL", 
              message='{"action": "SELL", "symbol": "{{ticker}}", "price": {{close}}, "token": "sniper-bybit-production-2024"}')

// =====================
// === VISUALIZATION
// =====================

// EMA Lines
plot(show_ema ? ema_fast : na, "EMA Fast", color=color.blue, linewidth=1)
plot(show_ema ? ema_slow : na, "EMA Slow", color=color.red, linewidth=1)

// Entry Signals
plotshape(show_signals and long_signal_final, title="Debug Long", location=location.belowbar, style=shape.triangleup, size=size.large, color=color.lime)
plotshape(show_signals and short_signal_final, title="Debug Short", location=location.abovebar, style=shape.triangledown, size=size.large, color=color.red)

// Signal Labels
if show_signals and long_signal_final
    label.new(bar_index, low - atr, "🔍 DEBUG BUY\nConf: " + str.tostring(confidence_long, "#.##"), 
              color=color.lime, textcolor=color.black, style=label.style_label_up, size=size.normal)

if show_signals and short_signal_final
    label.new(bar_index, high + atr, "🔍 DEBUG SELL\nConf: " + str.tostring(confidence_short, "#.##"), 
              color=color.red, textcolor=color.white, style=label.style_label_down, size=size.normal)

// Background for ranging markets
bgcolor(is_ranging ? color.new(color.orange, 90) : na, title="Ranging Market")

// =====================
// === DEBUG TABLE
// =====================

if show_debug_table and barstate.islast
    var table debug_table = table.new(position.top_right, 2, 12, bgcolor=color.white, border_width=1)
    
    table.cell(debug_table, 0, 0, "🔍 DEBUG FILTERS", text_color=color.white, bgcolor=color.purple)
    table.cell(debug_table, 1, 0, "STATUS", text_color=color.white, bgcolor=color.purple)
    
    table.cell(debug_table, 0, 1, "Long Confidence", text_color=color.black)
    table.cell(debug_table, 1, 1, str.tostring(confidence_long, "#.##"), text_color=confidence_long >= min_confidence ? color.green : color.red)
    
    table.cell(debug_table, 0, 2, "Short Confidence", text_color=color.black)
    table.cell(debug_table, 1, 2, str.tostring(confidence_short, "#.##"), text_color=confidence_short >= min_confidence ? color.green : color.red)
    
    table.cell(debug_table, 0, 3, "Trend Bull", text_color=color.black)
    table.cell(debug_table, 1, 3, trend_alignment_bull ? "✅" : "❌", text_color=trend_alignment_bull ? color.green : color.red)
    
    table.cell(debug_table, 0, 4, "Trend Bear", text_color=color.black)
    table.cell(debug_table, 1, 4, trend_alignment_bear ? "✅" : "❌", text_color=trend_alignment_bear ? color.green : color.red)
    
    table.cell(debug_table, 0, 5, "Volume OK", text_color=color.black)
    table.cell(debug_table, 1, 5, volume_ok ? "✅" : "❌", text_color=volume_ok ? color.green : color.red)
    
    table.cell(debug_table, 0, 6, "Volume Ratio", text_color=color.black)
    table.cell(debug_table, 1, 6, str.tostring(volume_ratio, "#.##"), text_color=color.black)
    
    table.cell(debug_table, 0, 7, "Volatility OK", text_color=color.black)
    table.cell(debug_table, 1, 7, volatility_ok ? "✅" : "❌", text_color=volatility_ok ? color.green : color.red)
    
    table.cell(debug_table, 0, 8, "RSI", text_color=color.black)
    table.cell(debug_table, 1, 8, str.tostring(rsi, "#.#"), text_color=color.black)
    
    table.cell(debug_table, 0, 9, "RSI Long OK", text_color=color.black)
    table.cell(debug_table, 1, 9, rsi_long_ok ? "✅" : "❌", text_color=rsi_long_ok ? color.green : color.red)
    
    table.cell(debug_table, 0, 10, "RSI Short OK", text_color=color.black)
    table.cell(debug_table, 1, 10, rsi_short_ok ? "✅" : "❌", text_color=rsi_short_ok ? color.green : color.red)
    
    table.cell(debug_table, 0, 11, "Not Ranging", text_color=color.black)
    table.cell(debug_table, 1, 11, not_ranging ? "✅" : "❌", text_color=not_ranging ? color.green : color.red)